import type { BaseSyntheticEvent, ChangeEvent } from 'react';

export type Primitive = string | number | boolean | undefined | null | Date;

export type ValidateResult = boolean | string | undefined;
export type ValidateFunction = (value: any) => ValidateResult | Promise<ValidateResult>;

export interface RegisterValidationRule {
  value: number | RegExp;
  message?: string;
}

export interface RegisterOptions<TFieldValue = Primitive> {
  required?: string | boolean;
  minLength?: RegisterValidationRule;
  maxLength?: RegisterValidationRule;
  pattern?: RegisterValidationRule;
  validate?: ValidateFunction | Record<string, ValidateFunction>;
  shouldUnregister?: boolean;
  valueAsNumber?: boolean;
  valueAsDate?: boolean;
  setValueAs?: (value: unknown) => TFieldValue;
}

export type FieldError = {
  type: string;
  message?: string;
};

export type FieldErrors<TFieldValues> = {
  [K in keyof TFieldValues]?: FieldError;
};

export type SubmitHandler<TFieldValues> = (
  data: TFieldValues,
  event?: BaseSyntheticEvent
) => void | Promise<void>;

export interface UseFormOptions<TFieldValues> {
  defaultValues?: Partial<TFieldValues>;
}

export interface UseFormRegisterReturn {
  name: string;
  value: any;
  onChange: (
    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => void | Promise<void>;
  onBlur: () => void;
}

export interface UseFormReturn<TFieldValues> {
  register: (
    name: keyof TFieldValues & string,
    options?: RegisterOptions
  ) => UseFormRegisterReturn;
  handleSubmit: (
    onValid: SubmitHandler<TFieldValues>
  ) => (event?: BaseSyntheticEvent) => Promise<void>;
  reset: (values?: Partial<TFieldValues>) => void;
  setValue: (name: keyof TFieldValues & string, value: unknown) => void;
  getValues: () => TFieldValues;
  watch: (name?: keyof TFieldValues & string) => any;
  clearErrors: (name?: keyof TFieldValues & string) => void;
  setError: (name: keyof TFieldValues & string, error: FieldError) => void;
  formState: {
    errors: FieldErrors<TFieldValues>;
    isSubmitting: boolean;
    isValid: boolean;
  };
}

export declare function useForm<
  TFieldValues extends Record<string, any> = Record<string, any>
>(options?: UseFormOptions<TFieldValues>): UseFormReturn<TFieldValues>;
