<?php
// Include authentication check
require_once 'includes/auth.php';

// Load config and places data
$config = load_config();
$places = load_places();

// Include header
include 'includes/header.php';
?>

<!-- Filter and search section -->
<div class="filters">
    <div class="filter-group">
        <label for="search">Search</label>
        <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" id="search-places" placeholder="Search places...">
        </div>
    </div>

    <div class="filter-group">
        <label>Filter by Attribute</label>
        <div class="filter-buttons" id="attribute-filters">
            <!-- Attribute filters will be generated by JavaScript -->
        </div>
    </div>

    <div class="filter-group">
        <label>Actions</label>
        <div class="filter-buttons">
            <button id="reset-filters" class="btn btn-light">Reset Filters</button>
        </div>
    </div>
</div>

<!-- Places list -->
<div class="card">
    <div class="card-header">
        <h3>Places</h3>
        <div class="header-actions">
            <span id="places-count"></span>
        </div>
    </div>

    <div class="table-container">
        <table class="table" id="places-table">
            <thead>
                <tr>
                    <th style="width: 50px;">#</th>
                    <th style="width: 70px;">Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Attributes</th>
                    <th style="width: 120px;">Actions</th>
                </tr>
            </thead>
            <tbody id="places-tbody">
                <!-- Places will be generated by JavaScript -->
            </tbody>
        </table>
    </div>

    <div class="card-footer">
        <div class="pagination" id="places-pagination">
            <!-- Pagination will be generated by JavaScript -->
        </div>
    </div>
</div>

<!-- Place edit/add modal template (hidden) -->
<template id="place-modal-template">
    <form id="place-form" enctype="multipart/form-data">
        <input type="hidden" id="place-id" name="place_id">

        <div class="form-row">
            <div class="form-col">
                <div class="form-group">
                    <label for="place-name">Name *</label>
                    <input type="text" id="place-name" name="name" class="form-control" required>
                </div>
            </div>
            <div class="form-col">
                <div class="form-group">
                    <label for="place-verified">Verified</label>
                    <select id="place-verified" name="verified" class="form-control">
                        <option value="1">Yes</option>
                        <option value="0">No</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-col">
                <div class="form-group">
                    <label for="place-lat">Latitude *</label>
                    <input type="text" id="place-lat" name="lat" class="form-control" required>
                </div>
            </div>
            <div class="form-col">
                <div class="form-group">
                    <label for="place-lng">Longitude *</label>
                    <input type="text" id="place-lng" name="lng" class="form-control" required>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="place-short-description">Short Description *</label>
            <input type="text" id="place-short-description" name="shirt_description" class="form-control" required>
        </div>

        <div class="form-group">
            <label for="place-description">Full Description *</label>
            <textarea id="place-description" name="description" class="form-control" required></textarea>
        </div>

        <div class="form-row">
            <div class="form-col">
                <div class="form-group">
                    <label for="place-link">Website Link</label>
                    <input type="url" id="place-link" name="link" class="form-control">
                </div>
            </div>
            <div class="form-col">
                <div class="form-group">
                    <label for="place-instagram">Instagram Link</label>
                    <input type="url" id="place-instagram" name="instagram" class="form-control">
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="place-maps-url">Google Maps URL</label>
            <input type="url" id="place-maps-url" name="maps_url" class="form-control">
        </div>

        <div class="form-group">
            <label for="place-image">Image</label>
            <div class="image-upload">
                <input type="file" id="place-image" name="image" class="form-control" accept="image/*">
                <input type="hidden" id="place-image-current" name="current_image">
                <div class="image-preview">
                    <img id="place-image-preview" src="" alt="Place image preview">
                </div>
            </div>
        </div>

        <div class="form-group">
            <label>Attributes</label>
            <div class="checkbox-list" id="place-attributes">
                <!-- Attributes will be generated by JavaScript -->
            </div>
        </div>
    </form>
</template>

<!-- Place view modal template (hidden) -->
<template id="place-view-template">
    <div class="place-preview">
        <img id="place-view-image" class="place-image-preview" src="" alt="">
        <div class="place-preview-details">
            <h3 id="place-view-name"></h3>
            <p id="place-view-description"></p>
            <div class="place-attributes" id="place-view-attributes">
                <!-- Attributes will be generated by JavaScript -->
            </div>
            <p class="mt-3">
                <strong>Links:</strong>
                <span id="place-view-links"></span>
            </p>
            <p>
                <strong>Coordinates:</strong>
                <span id="place-view-coordinates"></span>
            </p>
        </div>
    </div>
</template>

<!-- JavaScript for places management -->
<script>
// Global variables
let allPlaces = <?php echo json_encode($places); ?>;
const config = <?php echo json_encode($config); ?>;
let filteredPlaces = [...allPlaces];
let currentPage = 1;
const itemsPerPage = 10;
let activeFilters = [];

// Document ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize places table
    renderPlaces();

    // Initialize attribute filters
    renderAttributeFilters();

    // Add event listeners
    document.getElementById('search-places').addEventListener('input', handleSearch);
    document.getElementById('reset-filters').addEventListener('click', resetFilters);
    document.getElementById('add-place-btn').addEventListener('click', openAddPlaceModal);

    // Add image preview functionality
    const imageInput = document.getElementById('place-image');
    if (imageInput) {
        imageInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('place-image-preview').src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }
});

// Render places table
function renderPlaces() {
    const tbody = document.getElementById('places-tbody');
    const pagination = document.getElementById('places-pagination');
    const placesCount = document.getElementById('places-count');

    // Clear table body
    tbody.innerHTML = '';

    // Display total count
    placesCount.textContent = `${filteredPlaces.length} place(s) found`;

    // Calculate pagination
    const totalPages = Math.ceil(filteredPlaces.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, filteredPlaces.length);

    // Render table rows
    if (filteredPlaces.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center">No places found</td></tr>';
    } else {
        for (let i = startIndex; i < endIndex; i++) {
            const place = filteredPlaces[i];
            const row = document.createElement('tr');

            // Create attributes badges
            let attributesBadges = '';
            if (place.attributes && place.attributes.length > 0) {
                attributesBadges = place.attributes.slice(0, 3).map(attr => {
                    // Find attribute definition in config
                    const attrConfig = [...config.filters.leftFilters, ...config.filters.rightFilters]
                        .find(filter => filter.key === attr);

                    if (attrConfig) {
                        return `<span class="place-attribute">${attrConfig.label}</span>`;
                    }
                    return `<span class="place-attribute">${attr}</span>`;
                }).join('');

                if (place.attributes.length > 3) {
                    attributesBadges += `<span class="place-attribute">+${place.attributes.length - 3} more</span>`;
                }
            }

            row.innerHTML = `
                <td>${i + 1}</td>
                <td><img src="${place.image}" alt="${place.name}" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;"></td>
                <td>${place.name}</td>
                <td>${place.shirt_description.length > 50 ? place.shirt_description.substring(0, 50) + '...' : place.shirt_description}</td>
                <td>${attributesBadges}</td>
                <td class="actions">
                    <button class="btn btn-sm btn-light view-place" data-index="${i}"><i class="fas fa-eye"></i></button>
                    <button class="btn btn-sm btn-primary edit-place" data-index="${i}"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-danger delete-place" data-index="${i}"><i class="fas fa-trash"></i></button>
                </td>
            `;

            tbody.appendChild(row);
        }

        // Add event listeners to buttons
        const viewButtons = document.querySelectorAll('.view-place');
        const editButtons = document.querySelectorAll('.edit-place');
        const deleteButtons = document.querySelectorAll('.delete-place');

        viewButtons.forEach(button => {
            button.addEventListener('click', function() {
                const index = parseInt(this.getAttribute('data-index'));
                openViewPlaceModal(filteredPlaces[index]);
            });
        });

        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const index = parseInt(this.getAttribute('data-index'));
                openEditPlaceModal(filteredPlaces[index]);
            });
        });

        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const index = parseInt(this.getAttribute('data-index'));
                confirmDeletePlace(filteredPlaces[index]);
            });
        });
    }

    // Render pagination
    renderPagination(totalPages);
}

// Render pagination
function renderPagination(totalPages) {
    const pagination = document.getElementById('places-pagination');
    pagination.innerHTML = '';

    // No pagination needed if only 1 page
    if (totalPages <= 1) {
        return;
    }

    // Previous button
    const prevButton = document.createElement('a');
    prevButton.href = '#';
    prevButton.className = `pagination-item${currentPage === 1 ? ' disabled' : ''}`;
    prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
    if (currentPage > 1) {
        prevButton.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage--;
            renderPlaces();
        });
    }
    pagination.appendChild(prevButton);

    // Page numbers
    const maxPages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
    let endPage = Math.min(totalPages, startPage + maxPages - 1);

    if (endPage - startPage + 1 < maxPages) {
        startPage = Math.max(1, endPage - maxPages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('a');
        pageButton.href = '#';
        pageButton.className = `pagination-item${i === currentPage ? ' active' : ''}`;
        pageButton.textContent = i;

        if (i !== currentPage) {
            pageButton.addEventListener('click', (e) => {
                e.preventDefault();
                currentPage = i;
                renderPlaces();
            });
        }

        pagination.appendChild(pageButton);
    }

    // Next button
    const nextButton = document.createElement('a');
    nextButton.href = '#';
    nextButton.className = `pagination-item${currentPage === totalPages ? ' disabled' : ''}`;
    nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
    if (currentPage < totalPages) {
        nextButton.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage++;
            renderPlaces();
        });
    }
    pagination.appendChild(nextButton);
}

// Render attribute filters
function renderAttributeFilters() {
    const filterContainer = document.getElementById('attribute-filters');
    filterContainer.innerHTML = '';

    // Combine all filters
    const allFilters = [...config.filters.leftFilters, ...config.filters.rightFilters];

    // Create buttons for each attribute
    allFilters.forEach(filter => {
        const button = document.createElement('button');
        button.className = `btn btn-sm ${activeFilters.includes(filter.key) ? 'btn-primary' : 'btn-light'}`;
        button.textContent = filter.label;
        button.setAttribute('data-filter', filter.key);
        button.setAttribute('title', filter.tooltip);

        button.addEventListener('click', function() {
            const filterKey = this.getAttribute('data-filter');
            toggleFilter(filterKey);
        });

        filterContainer.appendChild(button);
    });
}

// Toggle a filter
function toggleFilter(filterKey) {
    const index = activeFilters.indexOf(filterKey);

    if (index === -1) {
        // Add filter
        activeFilters.push(filterKey);
    } else {
        // Remove filter
        activeFilters.splice(index, 1);
    }

    // Update filter buttons
    const filterButtons = document.querySelectorAll('#attribute-filters button');
    filterButtons.forEach(button => {
        const key = button.getAttribute('data-filter');
        if (activeFilters.includes(key)) {
            button.classList.remove('btn-light');
            button.classList.add('btn-primary');
        } else {
            button.classList.remove('btn-primary');
            button.classList.add('btn-light');
        }
    });

    // Apply filters
    applyFilters();
}

// Apply all filters and search
function applyFilters() {
    const searchText = document.getElementById('search-places').value.toLowerCase();

    // Filter places by search text and selected attributes
    filteredPlaces = allPlaces.filter(place => {
        // Check search text
        const matchesSearch = searchText === '' ||
            place.name.toLowerCase().includes(searchText) ||
            place.shirt_description.toLowerCase().includes(searchText) ||
            place.description.toLowerCase().includes(searchText);

        // Check attributes - must match all selected attributes
        let matchesAttributes = true;
        if (activeFilters.length > 0) {
            matchesAttributes = activeFilters.every(filter =>
                place.attributes && place.attributes.includes(filter)
            );
        }

        return matchesSearch && matchesAttributes;
    });

    // Reset to first page
    currentPage = 1;

    // Update display
    renderPlaces();
}

// Handle search input
function handleSearch() {
    applyFilters();
}

// Reset all filters
function resetFilters() {
    document.getElementById('search-places').value = '';
    activeFilters = [];

    // Reset filter buttons
    const filterButtons = document.querySelectorAll('#attribute-filters button');
    filterButtons.forEach(button => {
        button.classList.remove('btn-primary');
        button.classList.add('btn-light');
    });

    // Reset to all places
    filteredPlaces = [...allPlaces];
    currentPage = 1;

    // Update display
    renderPlaces();
}

// Open add place modal
function openAddPlaceModal() {
    // Get modal template
    const template = document.getElementById('place-modal-template');
    const modalContent = document.importNode(template.content, true);

    // Reset form
    const form = modalContent.querySelector('#place-form');
    form.reset();

    // Reset hidden fields
    form.querySelector('#place-id').value = '';
    form.querySelector('#place-image-current').value = '';

    // Set default values
    form.querySelector('#place-verified').value = '1';

    // Reset image preview
    const imgPreview = form.querySelector('#place-image-preview');
    imgPreview.src = '';

    // Render attribute checkboxes
    renderAttributeCheckboxes(form, []);

    // Create and open modal
    const modal = Modal.create({
        title: 'Add New Place',
        content: modalContent,
        buttons: [
            {
                text: 'Cancel',
                type: 'light'
            },
            {
                text: 'Save Place',
                type: 'primary',
                handler: (e, modal) => {
                    submitPlaceForm(form, modal);
                }
            }
        ]
    });

    modal.open();
}

// Open edit place modal
function openEditPlaceModal(place) {
    // Get modal template
    const template = document.getElementById('place-modal-template');
    const modalContent = document.importNode(template.content, true);

    // Get form
    const form = modalContent.querySelector('#place-form');

    // Fill form with place data
    form.querySelector('#place-id').value = findPlaceIndexByName(place.name);
    form.querySelector('#place-name').value = place.name;
    form.querySelector('#place-lat').value = place.lat;
    form.querySelector('#place-lng').value = place.lng;
    form.querySelector('#place-short-description').value = place.shirt_description;
    form.querySelector('#place-description').value = place.description;
    form.querySelector('#place-link').value = place.link || '';
    form.querySelector('#place-instagram').value = place.instagram || '';
    form.querySelector('#place-maps-url').value = place.maps_url || '';
    form.querySelector('#place-verified').value = place.verified ? '1' : '0';

    // Set current image
    const imgPreview = form.querySelector('#place-image-preview');
    imgPreview.src = place.image;
    form.querySelector('#place-image-current').value = place.image;

    // Render attribute checkboxes
    renderAttributeCheckboxes(form, place.attributes || []);

    // Create and open modal
    const modal = Modal.create({
        title: 'Edit Place',
        content: modalContent,
        buttons: [
            {
                text: 'Cancel',
                type: 'light'
            },
            {
                text: 'Save Changes',
                type: 'primary',
                handler: (e, modal) => {
                    submitPlaceForm(form, modal);
                }
            }
        ]
    });

    modal.open();
}

// Open view place modal
function openViewPlaceModal(place) {
    // Get modal template
    const template = document.getElementById('place-view-template');
    const modalContent = document.importNode(template.content, true);

    // Fill with place data
    modalContent.querySelector('#place-view-name').textContent = place.name;
    modalContent.querySelector('#place-view-description').textContent = place.description;
    modalContent.querySelector('#place-view-image').src = place.image;

    // Display coordinates
    modalContent.querySelector('#place-view-coordinates').textContent = `${place.lat}, ${place.lng}`;

    // Display links
    let linksHtml = '';
    if (place.link) {
        linksHtml += `<a href="${place.link}" target="_blank" class="btn btn-sm btn-light mr-2">Website</a> `;
    }
    if (place.instagram) {
        linksHtml += `<a href="${place.instagram}" target="_blank" class="btn btn-sm btn-light mr-2">Instagram</a> `;
    }
    if (place.maps_url) {
        linksHtml += `<a href="${place.maps_url}" target="_blank" class="btn btn-sm btn-light">Google Maps</a>`;
    }
    modalContent.querySelector('#place-view-links').innerHTML = linksHtml || 'No links available';

    // Render attributes
    const attributesContainer = modalContent.querySelector('#place-view-attributes');
    attributesContainer.innerHTML = '';

    if (place.attributes && place.attributes.length > 0) {
        // Combine all filters
        const allFilters = [...config.filters.leftFilters, ...config.filters.rightFilters];

        place.attributes.forEach(attr => {
            // Find attribute definition in config
            const attrConfig = allFilters.find(filter => filter.key === attr);

            if (attrConfig) {
                const attributeBadge = document.createElement('span');
                attributeBadge.className = 'place-attribute';

                if (attrConfig.icon) {
                    attributeBadge.innerHTML = `<img src="${attrConfig.icon}" alt="${attrConfig.label}"> ${attrConfig.label}`;
                } else {
                    attributeBadge.textContent = attrConfig.label;
                }

                attributesContainer.appendChild(attributeBadge);
            }
        });
    } else {
        attributesContainer.innerHTML = '<em>No attributes</em>';
    }

    // Create and open modal
    const modal = Modal.create({
        title: 'View Place',
        content: modalContent,
        buttons: [
            {
                text: 'Close',
                type: 'light'
            },
            {
                text: 'Edit',
                type: 'primary',
                handler: (e, modal) => {
                    modal.close();
                    openEditPlaceModal(place);
                }
            }
        ]
    });

    modal.open();
}

// Render attribute checkboxes
function renderAttributeCheckboxes(form, selectedAttributes) {
    const container = form.querySelector('#place-attributes');
    container.innerHTML = '';

    // Combine all filters
    const allFilters = [...config.filters.leftFilters, ...config.filters.rightFilters];

    // Create checkbox for each attribute
    allFilters.forEach(filter => {
        const isChecked = selectedAttributes.includes(filter.key);

        const checkboxItem = document.createElement('div');
        checkboxItem.className = 'checkbox-item';

        checkboxItem.innerHTML = `
            <input type="checkbox" id="attr-${filter.key}" name="attributes[]" value="${filter.key}" ${isChecked ? 'checked' : ''}>
            <label for="attr-${filter.key}" title="${filter.tooltip}">${filter.label}</label>
        `;

        container.appendChild(checkboxItem);
    });
}

// Submit place form
function submitPlaceForm(form, modal) {
    // Validate form
    if (!validateForm(form)) {
        Toast.show('Please fill all required fields', 'error');
        return;
    }

    // Create FormData object
    const formData = new FormData(form);

    // Get form data
    const placeId = formData.get('place_id');
    const isNewPlace = placeId === '';

    // Create place object
    const placeData = {
        name: formData.get('name'),
        lat: parseFloat(formData.get('lat')),
        lng: parseFloat(formData.get('lng')),
        shirt_description: formData.get('shirt_description'),
        description: formData.get('description'),
        link: formData.get('link'),
        instagram: formData.get('instagram'),
        maps_url: formData.get('maps_url'),
        image: formData.get('current_image'),
        verified: formData.get('verified') === '1',
        attributes: []
    };

    // Get selected attributes
    const attributeCheckboxes = form.querySelectorAll('input[name="attributes[]"]:checked');
    attributeCheckboxes.forEach(checkbox => {
        placeData.attributes.push(checkbox.value);
    });

    // Show loading state
    const saveButton = modal.modal.querySelector('.btn-primary');
    const originalText = saveButton.textContent;
    saveButton.innerHTML = '<span class="spinner"></span> Saving...';
    saveButton.disabled = true;

    // Submit form with AJAX
    fetch('api/save_place.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update image path if provided
            if (data.image_path) {
                placeData.image = data.image_path;
            }

            // Update places array
            if (isNewPlace) {
                // Add new place
                allPlaces.push(placeData);
            } else {
                // Update existing place
                allPlaces[placeId] = placeData;
            }

            // Close modal
            modal.close();

            // Show success message
            Toast.show(data.message, 'success');

            // Update table
            filteredPlaces = [...allPlaces];
            applyFilters();
        } else {
            // Show error message
            Toast.show(data.message, 'error');

            // Reset button
            saveButton.innerHTML = originalText;
            saveButton.disabled = false;
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Toast.show('An error occurred while saving the place', 'error');

        // Reset button
        saveButton.innerHTML = originalText;
        saveButton.disabled = false;
    });
}

// Confirm delete place
function confirmDeletePlace(place) {
    confirmModal(`Are you sure you want to delete "${place.name}"?`, () => {
        deletePlace(place);
    });
}

// Delete place
function deletePlace(place) {
    // Find place index
    const index = findPlaceIndexByName(place.name);

    if (index === -1) {
        Toast.show('Place not found', 'error');
        return;
    }

    // Send delete request
    fetch('api/delete_place.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ index })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Remove place from array
            allPlaces.splice(index, 1);

            // Show success message
            Toast.show(data.message, 'success');

            // Update table
            filteredPlaces = [...allPlaces];
            applyFilters();
        } else {
            // Show error message
            Toast.show(data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Toast.show('An error occurred while deleting the place', 'error');
    });
}

// Find place index by name
function findPlaceIndexByName(name) {
    return allPlaces.findIndex(place => place.name === name);
}

// Validate form
function validateForm(form) {
    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');

    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            isValid = false;
            field.classList.add('is-invalid');
        } else {
            field.classList.remove('is-invalid');
        }
    });

    return isValid;
}
</script>

<?php
// Include footer
include 'includes/footer.php';
?>
