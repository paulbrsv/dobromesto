{"ast":null,"code":"var _jsxFileName = \"/Users/borvel/Documents/GitHub/places-app/src/components/Map/Map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport { styled } from 'styled-components';\n\n// Fix for default icon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  will-change: transform;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n  perspective: 1000px;\n`;\n\n// Расширяем интерфейс MapOptions для поддержки дополнительных свойств\n_c = MapContainer;\nconst createPopupContent = place => `\n  <div class=\"place-card\">\n    <img src=\"${place.image}\" alt=\"${place.name}\" class=\"place-image\" style=\"width: 100%; height: 200px; object-fit: cover;\" />\n    <div class=\"place-content\" style=\"padding: 15px;\">\n      <h3 style=\"margin: 0; font-size: 18px;\">${place.name}</h3>\n      <p style=\"margin: 10px 0; font-size: 14px;\">${place.description}</p>\n      <div class=\"place-links-social\" style=\"margin-top: 10px;\">\n        ${place.instagram ? `<a href=\"${place.instagram}\" target=\"_blank\"><img src=\"/data/images/instagram.svg\" alt=\"Instagram\" style=\"width: 27px; height: 27px;\" /></a>` : ''}\n        ${place.maps_url ? `<a href=\"${place.maps_url}\" target=\"_blank\"><img src=\"/data/images/google.svg\" alt=\"Google Maps\" style=\"width: 27px; height: 27px;\" /></a>` : ''}\n      </div>\n    </div>\n  </div>\n`;\nexport const Map = ({\n  places,\n  config,\n  onMarkerClick,\n  selectedPlace,\n  mapRef,\n  onPopupClose,\n  onBoundsChange\n}) => {\n  _s();\n  const markersRef = useRef(null);\n  const activeMarkerRef = useRef(null);\n  const containerRef = useRef(null);\n  const mobilePopupRef = useRef(null);\n  // Флаг для отслеживания программного закрытия попапа\n  const isProgrammaticClose = useRef(false);\n  // Флаг для отслеживания первой установки границ\n  const isInitialBoundsSet = useRef(false);\n  // Храним ссылку на функцию обратного вызова на верхнем уровне\n  const onBoundsChangeRef = useRef(onBoundsChange);\n  // Ссылка для хранения таймаута updateLabelsVisibility\n  const updateTimeoutRef = useRef(null);\n\n  // Обновляем ссылку при изменении функции\n  useEffect(() => {\n    onBoundsChangeRef.current = onBoundsChange;\n  }, [onBoundsChange]);\n\n  // Создаем мобильный попап\n  useEffect(() => {\n    if (!mobilePopupRef.current) {\n      const popupDiv = document.createElement('div');\n      popupDiv.className = 'map-popup-mobile';\n      document.body.appendChild(popupDiv);\n      mobilePopupRef.current = popupDiv;\n      return () => {\n        document.body.removeChild(popupDiv);\n        mobilePopupRef.current = null;\n      };\n    }\n  }, []);\n  const showMobilePopup = useCallback(place => {\n    if (!mobilePopupRef.current) return;\n    const popupContent = `\n      <div class=\"place-card\">\n        <img src=\"${place.image}\" alt=\"${place.name}\" class=\"place-image\" />\n        <div class=\"place-content\">\n          <h3>${place.name}</h3>\n          <p>${place.description}</p>\n          <div class=\"place-links-social\">\n            ${place.instagram ? `<a href=\"${place.instagram}\" target=\"_blank\"><img src=\"/data/images/instagram.svg\" alt=\"Instagram\" /></a>` : ''}\n            ${place.maps_url ? `<a href=\"${place.maps_url}\" target=\"_blank\"><img src=\"/data/images/google.svg\" alt=\"Google Maps\" /></a>` : ''}\n          </div>\n        </div>\n        <button class=\"close-btn-mobile\">×</button>\n      </div>\n    `;\n    mobilePopupRef.current.innerHTML = popupContent;\n    mobilePopupRef.current.classList.add('active');\n    const closeBtn = mobilePopupRef.current.querySelector('.close-btn-mobile');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => {\n        if (mobilePopupRef.current) {\n          mobilePopupRef.current.classList.remove('active');\n          if (activeMarkerRef.current) {\n            activeMarkerRef.current.setIcon(createDefaultIcon());\n            activeMarkerRef.current = null;\n          }\n\n          // Сообщаем, что попап закрыт, чтобы сбросить selectedPlace\n          if (onPopupClose) {\n            onPopupClose();\n          }\n        }\n      });\n    }\n  }, [onPopupClose]);\n  const createDefaultIcon = useCallback(() => {\n    return L.divIcon({\n      className: 'marker-default',\n      iconSize: [30, 30],\n      iconAnchor: [15, 15],\n      html: '<div></div>'\n    });\n  }, []);\n  const createCustomIcon = useCallback(() => {\n    return L.divIcon({\n      className: 'marker-active',\n      iconSize: [30, 40],\n      iconAnchor: [15, 40],\n      popupAnchor: [0, -40],\n      html: '<div></div>'\n    });\n  }, []);\n  const createMarkerClusterGroup = useCallback(() => {\n    return L.markerClusterGroup({\n      iconCreateFunction: cluster => {\n        const count = cluster.getChildCount();\n        return L.divIcon({\n          html: `<div class=\"cluster-icon\">${count}</div>`,\n          className: 'marker-cluster',\n          iconSize: L.point(40, 40)\n        });\n      },\n      disableClusteringAtZoom: config.mapSettings.clusterSettings.disableClusteringAtZoom,\n      spiderfyOnMaxZoom: false,\n      maxClusterRadius: config.mapSettings.clusterSettings.maxClusterRadius,\n      zoomToBoundsOnClick: false,\n      showCoverageOnHover: false,\n      animate: true,\n      animateAddingMarkers: false\n    });\n  }, [config.mapSettings.clusterSettings]);\n\n  // Функция для проверки наложения меток (вынесена для оптимизации)\n  const shouldShowLabel = useCallback((marker, visibleMarkers) => {\n    var _mapRef$current;\n    // Одиночные метки всегда показываем\n    if (visibleMarkers.length <= 1) return true;\n    const markerPoint = (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.latLngToContainerPoint(marker.getLatLng());\n    if (!markerPoint) return false;\n\n    // Минимальное расстояние между метками в пикселях\n    const minDistance = 100;\n\n    // Проверяем расстояние до других видимых меток\n    for (const otherMarker of visibleMarkers) {\n      var _mapRef$current2;\n      if (marker === otherMarker) continue;\n      const otherPoint = (_mapRef$current2 = mapRef.current) === null || _mapRef$current2 === void 0 ? void 0 : _mapRef$current2.latLngToContainerPoint(otherMarker.getLatLng());\n      if (!otherPoint) continue;\n      const distance = markerPoint.distanceTo(otherPoint);\n      if (distance < minDistance) {\n        var _mapRef$current3, _mapRef$current4;\n        // Если метки слишком близко, показываем только ту, что ближе к центру экрана\n        const center = (_mapRef$current3 = mapRef.current) === null || _mapRef$current3 === void 0 ? void 0 : _mapRef$current3.getCenter();\n        if (!center) continue;\n        const centerPoint = (_mapRef$current4 = mapRef.current) === null || _mapRef$current4 === void 0 ? void 0 : _mapRef$current4.latLngToContainerPoint(center);\n        if (!centerPoint) continue;\n        const distToCenter = markerPoint.distanceTo(centerPoint);\n        const otherDistToCenter = otherPoint.distanceTo(centerPoint);\n\n        // Если эта метка дальше от центра, скрываем её\n        if (distToCenter > otherDistToCenter) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }, []);\n\n  // Создаем дебаунсированную функцию обновления видимости меток\n  const updateLabelsVisibility = useCallback(markers => {\n    // Отменяем предыдущий таймаут, если он есть\n    if (updateTimeoutRef.current) {\n      window.clearTimeout(updateTimeoutRef.current);\n    }\n\n    // Устанавливаем новый таймаут\n    updateTimeoutRef.current = window.setTimeout(() => {\n      if (!mapRef.current || !markersRef.current) return;\n      const zoom = mapRef.current.getZoom();\n\n      // Для небольшого зума скрываем все названия\n      if (zoom < 14) {\n        markers.forEach(marker => {\n          const tooltip = marker.getTooltip();\n          if (tooltip) tooltip.setOpacity(0);\n        });\n        return;\n      }\n\n      // Кэшируем видимые маркеры для уменьшения вычислений\n      const visibleMarkers = [];\n      markers.forEach(marker => {\n        var _markersRef$current;\n        // Проверяем, является ли родитель маркера кластером\n        const parent = (_markersRef$current = markersRef.current) === null || _markersRef$current === void 0 ? void 0 : _markersRef$current.getVisibleParent(marker);\n        if (parent === marker) {\n          visibleMarkers.push(marker);\n        }\n      });\n\n      // Используем обычный объект для отслеживания изменений видимости\n      const tooltipVisibility = {};\n\n      // Определяем, какие маркеры должны быть видимыми\n      visibleMarkers.forEach(marker => {\n        const markerId = marker._leaflet_id;\n        tooltipVisibility[markerId] = shouldShowLabel(marker, visibleMarkers);\n      });\n\n      // Обновляем только маркеры, состояние которых изменилось\n      markers.forEach(marker => {\n        var _tooltip$getElement;\n        const tooltip = marker.getTooltip();\n        if (!tooltip) return;\n\n        // Проверяем, должна ли метка быть видимой\n        const markerId = marker._leaflet_id;\n        const shouldBeVisible = tooltipVisibility[markerId] && visibleMarkers.includes(marker);\n        const isVisible = ((_tooltip$getElement = tooltip.getElement()) === null || _tooltip$getElement === void 0 ? void 0 : _tooltip$getElement.style.opacity) !== '0';\n\n        // Обновляем только если состояние изменилось\n        if (shouldBeVisible !== isVisible) {\n          tooltip.setOpacity(shouldBeVisible ? 1 : 0);\n        }\n      });\n    }, 150); // Увеличиваем задержку для лучшего дебаунсинга\n  }, [shouldShowLabel]);\n  const updateMarkers = useCallback(() => {\n    if (!mapRef.current || !markersRef.current) return;\n\n    // Очищаем все слои, включая предыдущие маркеры\n    markersRef.current.clearLayers();\n\n    // Сбрасываем активный маркер\n    activeMarkerRef.current = null;\n    const defaultIcon = createDefaultIcon();\n    const customIcon = createCustomIcon();\n\n    // Создаем маркеры с tooltips\n    const markers = [];\n    places.forEach(place => {\n      var _markersRef$current2;\n      const marker = L.marker([place.lat, place.lng], {\n        icon: defaultIcon,\n        riseOnHover: true,\n        riseOffset: 250\n      });\n      if (window.innerWidth > 768) {\n        const popup = L.popup({\n          maxWidth: 500,\n          className: 'place-popup',\n          closeButton: true,\n          closeOnClick: false,\n          autoPan: true,\n          autoPanPadding: [50, 50]\n        }).setContent(createPopupContent(place));\n        marker.bindPopup(popup);\n      }\n\n      // Создаем tooltip и делаем его невидимым по умолчанию\n      marker.bindTooltip(place.name, {\n        permanent: true,\n        direction: 'bottom',\n        offset: [0, 5],\n        className: 'place-label',\n        opacity: 0\n      });\n\n      // Добавляем место в данные маркера для доступа в дальнейшем\n      marker.place = place;\n      marker.on('click', () => {\n        var _mapRef$current5, _mapRef$current6;\n        // При клике на тот же маркер, отменяем выбор\n        if (activeMarkerRef.current === marker) {\n          marker.setIcon(defaultIcon);\n          if (window.innerWidth > 768) {\n            isProgrammaticClose.current = true;\n            marker.closePopup();\n          }\n          activeMarkerRef.current = null;\n          onMarkerClick(place); // Передаем повторный клик для отмены выбора\n          return;\n        }\n\n        // При клике на другой маркер\n        if (activeMarkerRef.current && activeMarkerRef.current !== marker) {\n          activeMarkerRef.current.setIcon(defaultIcon);\n          if (window.innerWidth > 768) {\n            isProgrammaticClose.current = true;\n            activeMarkerRef.current.closePopup();\n          }\n        }\n        marker.setIcon(customIcon);\n        activeMarkerRef.current = marker;\n\n        // Центрируем карту с проверкой зума\n        const currentZoom = ((_mapRef$current5 = mapRef.current) === null || _mapRef$current5 === void 0 ? void 0 : _mapRef$current5.getZoom()) || 0;\n        const targetZoom = currentZoom >= 16 ? currentZoom : 16;\n        (_mapRef$current6 = mapRef.current) === null || _mapRef$current6 === void 0 ? void 0 : _mapRef$current6.setView(marker.getLatLng(), targetZoom, {\n          animate: true,\n          duration: 0.5\n        });\n        if (window.innerWidth > 768) {\n          marker.openPopup();\n        } else {\n          showMobilePopup(place);\n        }\n        onMarkerClick(place);\n      });\n      markers.push(marker);\n      (_markersRef$current2 = markersRef.current) === null || _markersRef$current2 === void 0 ? void 0 : _markersRef$current2.addLayer(marker);\n\n      // Устанавливаем активный маркер для выбранного места\n      if (selectedPlace && selectedPlace.name === place.name) {\n        marker.setIcon(customIcon);\n        activeMarkerRef.current = marker;\n        if (window.innerWidth > 768) {\n          marker.openPopup();\n        } else {\n          showMobilePopup(place);\n        }\n      }\n    });\n\n    // Добавляем обработчик клика на кластер\n    markersRef.current.on('clusterclick', e => {\n      const cluster = e.layer;\n      const childMarkers = cluster.getAllChildMarkers();\n      if (childMarkers.length === 1) {\n        childMarkers[0].fire('click');\n      } else {\n        var _mapRef$current7;\n        (_mapRef$current7 = mapRef.current) === null || _mapRef$current7 === void 0 ? void 0 : _mapRef$current7.setView(cluster.getLatLng(), 16, {\n          animate: true\n        });\n      }\n\n      // Обновляем видимость названий после раскрытия кластера с большей задержкой\n      setTimeout(() => updateLabelsVisibility(childMarkers), 300);\n    });\n\n    // Используем единый обработчик для событий с дебаунсингом\n    const handleMapChange = () => updateLabelsVisibility(markers);\n\n    // События, при которых нужно обновлять видимость названий\n    mapRef.current.on('zoomend', handleMapChange);\n    mapRef.current.on('moveend', handleMapChange);\n    markersRef.current.on('animationend', handleMapChange);\n\n    // Обновляем сразу после создания маркеров\n    setTimeout(() => updateLabelsVisibility(markers), 100);\n\n    // Очистка обработчиков и таймаутов при размонтировании\n    return () => {\n      if (updateTimeoutRef.current) {\n        window.clearTimeout(updateTimeoutRef.current);\n      }\n      if (mapRef.current) {\n        mapRef.current.off('zoomend', handleMapChange);\n        mapRef.current.off('moveend', handleMapChange);\n      }\n      if (markersRef.current) {\n        markersRef.current.off('animationend', handleMapChange);\n      }\n    };\n  }, [places, selectedPlace, createDefaultIcon, createCustomIcon, onMarkerClick, showMobilePopup, updateLabelsVisibility]);\n  useEffect(() => {\n    if (!containerRef.current || mapRef.current) return;\n    const map = L.map(containerRef.current, {\n      center: config.mapSettings.center,\n      zoom: config.mapSettings.initialZoom,\n      scrollWheelZoom: true,\n      closePopupOnClick: true,\n      tap: false,\n      attributionControl: false,\n      zoomControl: false,\n      maxZoom: config.mapSettings.maxZoom,\n      minZoom: config.mapSettings.initialZoom - 2,\n      bounceAtZoomLimits: false,\n      inertia: false\n    });\n    L.tileLayer(config.mapSettings.tileLayer.url, {\n      attribution: config.mapSettings.tileLayer.attribution,\n      subdomains: config.mapSettings.tileLayer.subdomains,\n      maxZoom: config.mapSettings.maxZoom,\n      minZoom: config.mapSettings.initialZoom - 2,\n      preferCanvas: true\n    }).addTo(map);\n    L.control.attribution({\n      position: 'bottomright',\n      prefix: false\n    }).addTo(map);\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n    mapRef.current = map;\n    markersRef.current = createMarkerClusterGroup();\n    map.addLayer(markersRef.current);\n\n    // Добавляем глобальный обработчик touchmove для предотвращения скроллинга страницы\n    // при взаимодействии с картой\n    const preventDefaultTouchMoveOnMap = e => {\n      if (e.target && e.target.closest('.leaflet-container')) {\n        e.preventDefault();\n      }\n    };\n\n    // Добавляем обработчик на уровне документа с passive: false,\n    // чтобы иметь возможность вызывать preventDefault()\n    document.addEventListener('touchmove', preventDefaultTouchMoveOnMap, {\n      passive: false\n    });\n    const handleResize = () => {\n      map.invalidateSize({\n        animate: false,\n        pan: false\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', handleResize);\n\n    // Используем явный window.setTimeout для избежания проблем с асинхронностью\n    window.setTimeout(handleResize, 100);\n    return () => {\n      document.removeEventListener('touchmove', preventDefaultTouchMoveOnMap);\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleResize);\n\n      // Очищаем таймауты\n      if (updateTimeoutRef.current) {\n        window.clearTimeout(updateTimeoutRef.current);\n      }\n      map.remove();\n      mapRef.current = null;\n      markersRef.current = null;\n    };\n  }, [config, createMarkerClusterGroup]);\n  useEffect(() => {\n    if (mapRef.current && markersRef.current) {\n      updateMarkers();\n\n      // Добавляем обработчик события закрытия попапа\n      const popupCloseHandler = () => {\n        // Обрабатываем только если закрытие не программное\n        if (!isProgrammaticClose.current) {\n          if (activeMarkerRef.current) {\n            // Только если закрытие инициировано пользователем\n            activeMarkerRef.current.setIcon(createDefaultIcon());\n            activeMarkerRef.current = null;\n\n            // Сообщаем, что попап закрыт пользователем\n            if (onPopupClose) {\n              onPopupClose();\n            }\n          }\n        }\n        // Сбрасываем флаг после использования\n        isProgrammaticClose.current = false;\n      };\n\n      // Удаляем старый обработчик, если он есть, и добавляем новый\n      mapRef.current.off('popupclose');\n      mapRef.current.on('popupclose', popupCloseHandler);\n      return () => {\n        if (mapRef.current) {\n          mapRef.current.off('popupclose', popupCloseHandler);\n        }\n      };\n    }\n  }, [updateMarkers, createDefaultIcon, onPopupClose]);\n\n  // Обрабатываем изменение selectedPlace\n  useEffect(() => {\n    var _markersRef$current3;\n    if (!mapRef.current || !selectedPlace) return;\n\n    // Пытаемся найти маркер для выбранного места\n    const allLayers = ((_markersRef$current3 = markersRef.current) === null || _markersRef$current3 === void 0 ? void 0 : _markersRef$current3.getLayers()) || [];\n    const allMarkers = allLayers;\n\n    // Маркер не найден, обновляем все маркеры\n    if (allMarkers.length === 0) {\n      updateMarkers();\n      return;\n    }\n\n    // Центрируем карту на выбранном месте если selectedPlace изменился\n    const currentZoom = mapRef.current.getZoom();\n    const targetZoom = currentZoom >= 16 ? currentZoom : 16;\n    mapRef.current.setView([selectedPlace.lat, selectedPlace.lng], targetZoom, {\n      animate: true,\n      duration: 0.5\n    });\n  }, [selectedPlace, updateMarkers]);\n\n  // Отслеживаем изменения границ карты с дебаунсингом\n  useEffect(() => {\n    if (!mapRef.current) return;\n    let boundsTimeout = null;\n    const handleMove = () => {\n      if (boundsTimeout) {\n        window.clearTimeout(boundsTimeout);\n      }\n      boundsTimeout = window.setTimeout(() => {\n        if (!mapRef.current) return;\n        const bounds = mapRef.current.getBounds();\n        if (bounds && onBoundsChangeRef.current) {\n          onBoundsChangeRef.current(bounds);\n        }\n      }, 100);\n    };\n    mapRef.current.on('moveend', handleMove);\n    mapRef.current.on('zoomend', handleMove);\n\n    // Вызываем handleMove только при первом рендере\n    if (!isInitialBoundsSet.current) {\n      window.setTimeout(() => {\n        if (mapRef.current) {\n          isInitialBoundsSet.current = true; // Устанавливаем флаг до вызова handleMove\n          handleMove();\n        }\n      }, 200);\n    }\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.off('moveend', handleMove);\n        mapRef.current.off('zoomend', handleMove);\n      }\n      if (boundsTimeout) {\n        window.clearTimeout(boundsTimeout);\n      }\n    };\n  }, []); // Убираем onBoundsChange из зависимостей\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    ref: containerRef,\n    className: \"map-wrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 608,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"iXDYQDwBPsViYxueCR/ynpXkz6A=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","L","styled","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapContainer","div","_c","createPopupContent","place","image","name","description","instagram","maps_url","Map","places","config","onMarkerClick","selectedPlace","mapRef","onPopupClose","onBoundsChange","_s","markersRef","activeMarkerRef","containerRef","mobilePopupRef","isProgrammaticClose","isInitialBoundsSet","onBoundsChangeRef","updateTimeoutRef","current","popupDiv","document","createElement","className","body","appendChild","removeChild","showMobilePopup","popupContent","innerHTML","classList","add","closeBtn","querySelector","addEventListener","remove","setIcon","createDefaultIcon","divIcon","iconSize","iconAnchor","html","createCustomIcon","popupAnchor","createMarkerClusterGroup","markerClusterGroup","iconCreateFunction","cluster","count","getChildCount","point","disableClusteringAtZoom","mapSettings","clusterSettings","spiderfyOnMaxZoom","maxClusterRadius","zoomToBoundsOnClick","showCoverageOnHover","animate","animateAddingMarkers","shouldShowLabel","marker","visibleMarkers","_mapRef$current","length","markerPoint","latLngToContainerPoint","getLatLng","minDistance","otherMarker","_mapRef$current2","otherPoint","distance","distanceTo","_mapRef$current3","_mapRef$current4","center","getCenter","centerPoint","distToCenter","otherDistToCenter","updateLabelsVisibility","markers","window","clearTimeout","setTimeout","zoom","getZoom","forEach","tooltip","getTooltip","setOpacity","_markersRef$current","parent","getVisibleParent","push","tooltipVisibility","markerId","_leaflet_id","_tooltip$getElement","shouldBeVisible","includes","isVisible","getElement","style","opacity","updateMarkers","clearLayers","defaultIcon","customIcon","_markersRef$current2","lat","lng","icon","riseOnHover","riseOffset","innerWidth","popup","maxWidth","closeButton","closeOnClick","autoPan","autoPanPadding","setContent","bindPopup","bindTooltip","permanent","direction","offset","on","_mapRef$current5","_mapRef$current6","closePopup","currentZoom","targetZoom","setView","duration","openPopup","addLayer","e","layer","childMarkers","getAllChildMarkers","fire","_mapRef$current7","handleMapChange","off","map","initialZoom","scrollWheelZoom","closePopupOnClick","tap","attributionControl","zoomControl","maxZoom","minZoom","bounceAtZoomLimits","inertia","tileLayer","url","attribution","subdomains","preferCanvas","addTo","control","position","prefix","preventDefaultTouchMoveOnMap","target","closest","preventDefault","passive","handleResize","invalidateSize","pan","removeEventListener","popupCloseHandler","_markersRef$current3","allLayers","getLayers","allMarkers","boundsTimeout","handleMove","bounds","getBounds","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/borvel/Documents/GitHub/places-app/src/components/Map/Map.tsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport { Place, AppConfig } from '../../types/places';\nimport { styled } from 'styled-components';\n\n// Fix for default icon\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\ninterface MapProps {\n  places: Place[];\n  config: AppConfig;\n  onMarkerClick: (place: Place) => void;\n  selectedPlace?: Place | null;\n  mapRef: React.MutableRefObject<L.Map | null>;\n  onPopupClose?: () => void;\n  onBoundsChange?: (bounds: L.LatLngBounds) => void;\n}\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  will-change: transform;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n  perspective: 1000px;\n`;\n\n// Расширяем интерфейс MapOptions для поддержки дополнительных свойств\ndeclare module 'leaflet' {\n  interface MapOptions {\n    tap?: boolean;\n  }\n\n  interface TileLayerOptions {\n    preferCanvas?: boolean;\n  }\n}\n\nconst createPopupContent = (place: Place) => `\n  <div class=\"place-card\">\n    <img src=\"${place.image}\" alt=\"${place.name}\" class=\"place-image\" style=\"width: 100%; height: 200px; object-fit: cover;\" />\n    <div class=\"place-content\" style=\"padding: 15px;\">\n      <h3 style=\"margin: 0; font-size: 18px;\">${place.name}</h3>\n      <p style=\"margin: 10px 0; font-size: 14px;\">${place.description}</p>\n      <div class=\"place-links-social\" style=\"margin-top: 10px;\">\n        ${place.instagram ? `<a href=\"${place.instagram}\" target=\"_blank\"><img src=\"/data/images/instagram.svg\" alt=\"Instagram\" style=\"width: 27px; height: 27px;\" /></a>` : ''}\n        ${place.maps_url ? `<a href=\"${place.maps_url}\" target=\"_blank\"><img src=\"/data/images/google.svg\" alt=\"Google Maps\" style=\"width: 27px; height: 27px;\" /></a>` : ''}\n      </div>\n    </div>\n  </div>\n`;\n\nexport const Map: React.FC<MapProps> = ({ places, config, onMarkerClick, selectedPlace, mapRef, onPopupClose, onBoundsChange }) => {\n  const markersRef = useRef<L.MarkerClusterGroup | null>(null);\n  const activeMarkerRef = useRef<L.Marker | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mobilePopupRef = useRef<HTMLDivElement | null>(null);\n  // Флаг для отслеживания программного закрытия попапа\n  const isProgrammaticClose = useRef(false);\n  // Флаг для отслеживания первой установки границ\n  const isInitialBoundsSet = useRef(false);\n  // Храним ссылку на функцию обратного вызова на верхнем уровне\n  const onBoundsChangeRef = useRef(onBoundsChange);\n  // Ссылка для хранения таймаута updateLabelsVisibility\n  const updateTimeoutRef = useRef<number | null>(null);\n\n  // Обновляем ссылку при изменении функции\n  useEffect(() => {\n    onBoundsChangeRef.current = onBoundsChange;\n  }, [onBoundsChange]);\n\n  // Создаем мобильный попап\n  useEffect(() => {\n    if (!mobilePopupRef.current) {\n      const popupDiv = document.createElement('div');\n      popupDiv.className = 'map-popup-mobile';\n      document.body.appendChild(popupDiv);\n      mobilePopupRef.current = popupDiv;\n\n      return () => {\n        document.body.removeChild(popupDiv);\n        mobilePopupRef.current = null;\n      };\n    }\n  }, []);\n\n  const showMobilePopup = useCallback((place: Place) => {\n    if (!mobilePopupRef.current) return;\n\n    const popupContent = `\n      <div class=\"place-card\">\n        <img src=\"${place.image}\" alt=\"${place.name}\" class=\"place-image\" />\n        <div class=\"place-content\">\n          <h3>${place.name}</h3>\n          <p>${place.description}</p>\n          <div class=\"place-links-social\">\n            ${place.instagram ? `<a href=\"${place.instagram}\" target=\"_blank\"><img src=\"/data/images/instagram.svg\" alt=\"Instagram\" /></a>` : ''}\n            ${place.maps_url ? `<a href=\"${place.maps_url}\" target=\"_blank\"><img src=\"/data/images/google.svg\" alt=\"Google Maps\" /></a>` : ''}\n          </div>\n        </div>\n        <button class=\"close-btn-mobile\">×</button>\n      </div>\n    `;\n\n    mobilePopupRef.current.innerHTML = popupContent;\n    mobilePopupRef.current.classList.add('active');\n\n    const closeBtn = mobilePopupRef.current.querySelector('.close-btn-mobile');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => {\n        if (mobilePopupRef.current) {\n          mobilePopupRef.current.classList.remove('active');\n          if (activeMarkerRef.current) {\n            activeMarkerRef.current.setIcon(createDefaultIcon());\n            activeMarkerRef.current = null;\n          }\n\n          // Сообщаем, что попап закрыт, чтобы сбросить selectedPlace\n          if (onPopupClose) {\n            onPopupClose();\n          }\n        }\n      });\n    }\n  }, [onPopupClose]);\n\n  const createDefaultIcon = useCallback(() => {\n    return L.divIcon({\n      className: 'marker-default',\n      iconSize: [30, 30],\n      iconAnchor: [15, 15],\n      html: '<div></div>'\n    });\n  }, []);\n\n  const createCustomIcon = useCallback(() => {\n    return L.divIcon({\n      className: 'marker-active',\n      iconSize: [30, 40],\n      iconAnchor: [15, 40],\n      popupAnchor: [0, -40],\n      html: '<div></div>'\n    });\n  }, []);\n\n  const createMarkerClusterGroup = useCallback(() => {\n    return L.markerClusterGroup({\n      iconCreateFunction: (cluster: L.MarkerCluster) => {\n        const count = cluster.getChildCount();\n        return L.divIcon({\n          html: `<div class=\"cluster-icon\">${count}</div>`,\n          className: 'marker-cluster',\n          iconSize: L.point(40, 40)\n        });\n      },\n      disableClusteringAtZoom: config.mapSettings.clusterSettings.disableClusteringAtZoom,\n      spiderfyOnMaxZoom: false,\n      maxClusterRadius: config.mapSettings.clusterSettings.maxClusterRadius,\n      zoomToBoundsOnClick: false,\n      showCoverageOnHover: false,\n      animate: true,\n      animateAddingMarkers: false\n    });\n  }, [config.mapSettings.clusterSettings]);\n\n  // Функция для проверки наложения меток (вынесена для оптимизации)\n  const shouldShowLabel = useCallback((marker: L.Marker, visibleMarkers: L.Marker[]): boolean => {\n    // Одиночные метки всегда показываем\n    if (visibleMarkers.length <= 1) return true;\n\n    const markerPoint = mapRef.current?.latLngToContainerPoint(marker.getLatLng());\n    if (!markerPoint) return false;\n\n    // Минимальное расстояние между метками в пикселях\n    const minDistance = 100;\n\n    // Проверяем расстояние до других видимых меток\n    for (const otherMarker of visibleMarkers) {\n      if (marker === otherMarker) continue;\n\n      const otherPoint = mapRef.current?.latLngToContainerPoint(otherMarker.getLatLng());\n      if (!otherPoint) continue;\n\n      const distance = markerPoint.distanceTo(otherPoint);\n      if (distance < minDistance) {\n        // Если метки слишком близко, показываем только ту, что ближе к центру экрана\n        const center = mapRef.current?.getCenter();\n        if (!center) continue;\n\n        const centerPoint = mapRef.current?.latLngToContainerPoint(center);\n        if (!centerPoint) continue;\n\n        const distToCenter = markerPoint.distanceTo(centerPoint);\n        const otherDistToCenter = otherPoint.distanceTo(centerPoint);\n\n        // Если эта метка дальше от центра, скрываем её\n        if (distToCenter > otherDistToCenter) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }, []);\n\n  // Создаем дебаунсированную функцию обновления видимости меток\n  const updateLabelsVisibility = useCallback((markers: L.Marker[]) => {\n    // Отменяем предыдущий таймаут, если он есть\n    if (updateTimeoutRef.current) {\n      window.clearTimeout(updateTimeoutRef.current);\n    }\n    \n    // Устанавливаем новый таймаут\n    updateTimeoutRef.current = window.setTimeout(() => {\n      if (!mapRef.current || !markersRef.current) return;\n\n      const zoom = mapRef.current.getZoom();\n\n      // Для небольшого зума скрываем все названия\n      if (zoom < 14) {\n        markers.forEach(marker => {\n          const tooltip = marker.getTooltip();\n          if (tooltip) tooltip.setOpacity(0);\n        });\n        return;\n      }\n\n      // Кэшируем видимые маркеры для уменьшения вычислений\n      const visibleMarkers: L.Marker[] = [];\n      markers.forEach(marker => {\n        // Проверяем, является ли родитель маркера кластером\n        const parent = markersRef.current?.getVisibleParent(marker);\n        if (parent === marker) {\n          visibleMarkers.push(marker);\n        }\n      });\n\n      // Используем обычный объект для отслеживания изменений видимости\n      const tooltipVisibility: Record<string, boolean> = {};\n      \n      // Определяем, какие маркеры должны быть видимыми\n      visibleMarkers.forEach(marker => {\n        const markerId = (marker as any)._leaflet_id;\n        tooltipVisibility[markerId] = shouldShowLabel(marker, visibleMarkers);\n      });\n      \n      // Обновляем только маркеры, состояние которых изменилось\n      markers.forEach(marker => {\n        const tooltip = marker.getTooltip();\n        if (!tooltip) return;\n        \n        // Проверяем, должна ли метка быть видимой\n        const markerId = (marker as any)._leaflet_id;\n        const shouldBeVisible = tooltipVisibility[markerId] && visibleMarkers.includes(marker);\n        const isVisible = tooltip.getElement()?.style.opacity !== '0';\n        \n        // Обновляем только если состояние изменилось\n        if (shouldBeVisible !== isVisible) {\n          tooltip.setOpacity(shouldBeVisible ? 1 : 0);\n        }\n      });\n    }, 150); // Увеличиваем задержку для лучшего дебаунсинга\n  }, [shouldShowLabel]);\n\n  const updateMarkers = useCallback(() => {\n    if (!mapRef.current || !markersRef.current) return;\n\n    // Очищаем все слои, включая предыдущие маркеры\n    markersRef.current.clearLayers();\n\n    // Сбрасываем активный маркер\n    activeMarkerRef.current = null;\n\n    const defaultIcon = createDefaultIcon();\n    const customIcon = createCustomIcon();\n\n    // Создаем маркеры с tooltips\n    const markers: L.Marker[] = [];\n    places.forEach(place => {\n      const marker = L.marker([place.lat, place.lng], {\n        icon: defaultIcon,\n        riseOnHover: true,\n        riseOffset: 250\n      });\n\n      if (window.innerWidth > 768) {\n        const popup = L.popup({\n          maxWidth: 500,\n          className: 'place-popup',\n          closeButton: true,\n          closeOnClick: false,\n          autoPan: true,\n          autoPanPadding: [50, 50]\n        }).setContent(createPopupContent(place));\n\n        marker.bindPopup(popup);\n      }\n\n      // Создаем tooltip и делаем его невидимым по умолчанию\n      marker.bindTooltip(place.name, {\n        permanent: true,\n        direction: 'bottom',\n        offset: [0, 5],\n        className: 'place-label',\n        opacity: 0\n      });\n\n      // Добавляем место в данные маркера для доступа в дальнейшем\n      (marker as any).place = place;\n\n      marker.on('click', () => {\n        // При клике на тот же маркер, отменяем выбор\n        if (activeMarkerRef.current === marker) {\n          marker.setIcon(defaultIcon);\n          if (window.innerWidth > 768) {\n            isProgrammaticClose.current = true;\n            marker.closePopup();\n          }\n          activeMarkerRef.current = null;\n          onMarkerClick(place); // Передаем повторный клик для отмены выбора\n          return;\n        }\n\n        // При клике на другой маркер\n        if (activeMarkerRef.current && activeMarkerRef.current !== marker) {\n          activeMarkerRef.current.setIcon(defaultIcon);\n          if (window.innerWidth > 768) {\n            isProgrammaticClose.current = true;\n            activeMarkerRef.current.closePopup();\n          }\n        }\n\n        marker.setIcon(customIcon);\n        activeMarkerRef.current = marker;\n\n        // Центрируем карту с проверкой зума\n        const currentZoom = mapRef.current?.getZoom() || 0;\n        const targetZoom = currentZoom >= 16 ? currentZoom : 16;\n\n        mapRef.current?.setView(marker.getLatLng(), targetZoom, {\n          animate: true,\n          duration: 0.5\n        });\n\n        if (window.innerWidth > 768) {\n          marker.openPopup();\n        } else {\n          showMobilePopup(place);\n        }\n\n        onMarkerClick(place);\n      });\n\n      markers.push(marker);\n      markersRef.current?.addLayer(marker);\n\n      // Устанавливаем активный маркер для выбранного места\n      if (selectedPlace && selectedPlace.name === place.name) {\n        marker.setIcon(customIcon);\n        activeMarkerRef.current = marker;\n\n        if (window.innerWidth > 768) {\n          marker.openPopup();\n        } else {\n          showMobilePopup(place);\n        }\n      }\n    });\n\n    // Добавляем обработчик клика на кластер\n    markersRef.current.on('clusterclick', (e: L.LeafletEvent) => {\n      const cluster = e.layer as L.MarkerCluster;\n      const childMarkers = cluster.getAllChildMarkers();\n\n      if (childMarkers.length === 1) {\n        childMarkers[0].fire('click');\n      } else {\n        mapRef.current?.setView(cluster.getLatLng(), 16, { animate: true });\n      }\n\n      // Обновляем видимость названий после раскрытия кластера с большей задержкой\n      setTimeout(() => updateLabelsVisibility(childMarkers), 300);\n    });\n\n    // Используем единый обработчик для событий с дебаунсингом\n    const handleMapChange = () => updateLabelsVisibility(markers);\n\n    // События, при которых нужно обновлять видимость названий\n    mapRef.current.on('zoomend', handleMapChange);\n    mapRef.current.on('moveend', handleMapChange);\n    markersRef.current.on('animationend', handleMapChange);\n\n    // Обновляем сразу после создания маркеров\n    setTimeout(() => updateLabelsVisibility(markers), 100);\n    \n    // Очистка обработчиков и таймаутов при размонтировании\n    return () => {\n      if (updateTimeoutRef.current) {\n        window.clearTimeout(updateTimeoutRef.current);\n      }\n      \n      if (mapRef.current) {\n        mapRef.current.off('zoomend', handleMapChange);\n        mapRef.current.off('moveend', handleMapChange);\n      }\n      \n      if (markersRef.current) {\n        markersRef.current.off('animationend', handleMapChange);\n      }\n    };\n  }, [places, selectedPlace, createDefaultIcon, createCustomIcon, onMarkerClick, showMobilePopup, updateLabelsVisibility]);\n\n  useEffect(() => {\n    if (!containerRef.current || mapRef.current) return;\n\n    const map = L.map(containerRef.current, {\n      center: config.mapSettings.center,\n      zoom: config.mapSettings.initialZoom,\n      scrollWheelZoom: true,\n      closePopupOnClick: true,\n      tap: false,\n      attributionControl: false,\n      zoomControl: false,\n      maxZoom: config.mapSettings.maxZoom,\n      minZoom: config.mapSettings.initialZoom - 2,\n      bounceAtZoomLimits: false,\n      inertia: false\n    });\n\n    L.tileLayer(config.mapSettings.tileLayer.url, {\n      attribution: config.mapSettings.tileLayer.attribution,\n      subdomains: config.mapSettings.tileLayer.subdomains,\n      maxZoom: config.mapSettings.maxZoom,\n      minZoom: config.mapSettings.initialZoom - 2,\n      preferCanvas: true\n    }).addTo(map);\n\n    L.control.attribution({\n      position: 'bottomright',\n      prefix: false\n    }).addTo(map);\n\n    L.control.zoom({\n      position: 'topright'\n    }).addTo(map);\n\n    mapRef.current = map;\n    markersRef.current = createMarkerClusterGroup();\n    map.addLayer(markersRef.current);\n\n    // Добавляем глобальный обработчик touchmove для предотвращения скроллинга страницы\n    // при взаимодействии с картой\n    const preventDefaultTouchMoveOnMap = (e: TouchEvent) => {\n      if (e.target && \n         (e.target as HTMLElement).closest('.leaflet-container')) {\n        e.preventDefault();\n      }\n    };\n\n    // Добавляем обработчик на уровне документа с passive: false,\n    // чтобы иметь возможность вызывать preventDefault()\n    document.addEventListener('touchmove', preventDefaultTouchMoveOnMap, { passive: false });\n\n    const handleResize = () => {\n      map.invalidateSize({ animate: false, pan: false });\n    };\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', handleResize);\n\n    // Используем явный window.setTimeout для избежания проблем с асинхронностью\n    window.setTimeout(handleResize, 100);\n\n    return () => {\n      document.removeEventListener('touchmove', preventDefaultTouchMoveOnMap);\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleResize);\n      \n      // Очищаем таймауты\n      if (updateTimeoutRef.current) {\n        window.clearTimeout(updateTimeoutRef.current);\n      }\n      \n      map.remove();\n      mapRef.current = null;\n      markersRef.current = null;\n    };\n  }, [config, createMarkerClusterGroup]);\n\n  useEffect(() => {\n    if (mapRef.current && markersRef.current) {\n      updateMarkers();\n\n      // Добавляем обработчик события закрытия попапа\n      const popupCloseHandler = () => {\n        // Обрабатываем только если закрытие не программное\n        if (!isProgrammaticClose.current) {\n          if (activeMarkerRef.current) {\n            // Только если закрытие инициировано пользователем\n            activeMarkerRef.current.setIcon(createDefaultIcon());\n            activeMarkerRef.current = null;\n\n            // Сообщаем, что попап закрыт пользователем\n            if (onPopupClose) {\n              onPopupClose();\n            }\n          }\n        }\n        // Сбрасываем флаг после использования\n        isProgrammaticClose.current = false;\n      };\n\n      // Удаляем старый обработчик, если он есть, и добавляем новый\n      mapRef.current.off('popupclose');\n      mapRef.current.on('popupclose', popupCloseHandler);\n\n      return () => {\n        if (mapRef.current) {\n          mapRef.current.off('popupclose', popupCloseHandler);\n        }\n      };\n    }\n  }, [updateMarkers, createDefaultIcon, onPopupClose]);\n\n  // Обрабатываем изменение selectedPlace\n  useEffect(() => {\n    if (!mapRef.current || !selectedPlace) return;\n\n    // Пытаемся найти маркер для выбранного места\n    const allLayers = markersRef.current?.getLayers() || [];\n    const allMarkers = allLayers as L.Marker[];\n\n    // Маркер не найден, обновляем все маркеры\n    if (allMarkers.length === 0) {\n      updateMarkers();\n      return;\n    }\n\n    // Центрируем карту на выбранном месте если selectedPlace изменился\n    const currentZoom = mapRef.current.getZoom();\n    const targetZoom = currentZoom >= 16 ? currentZoom : 16;\n\n    mapRef.current.setView([selectedPlace.lat, selectedPlace.lng], targetZoom, {\n      animate: true,\n      duration: 0.5\n    });\n  }, [selectedPlace, updateMarkers]);\n\n  // Отслеживаем изменения границ карты с дебаунсингом\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    let boundsTimeout: number | null = null;\n    \n    const handleMove = () => {\n      if (boundsTimeout) {\n        window.clearTimeout(boundsTimeout);\n      }\n      \n      boundsTimeout = window.setTimeout(() => {\n        if (!mapRef.current) return;\n        const bounds = mapRef.current.getBounds();\n        if (bounds && onBoundsChangeRef.current) {\n          onBoundsChangeRef.current(bounds);\n        }\n      }, 100);\n    };\n\n    mapRef.current.on('moveend', handleMove);\n    mapRef.current.on('zoomend', handleMove);\n\n    // Вызываем handleMove только при первом рендере\n    if (!isInitialBoundsSet.current) {\n      window.setTimeout(() => {\n        if (mapRef.current) {\n          isInitialBoundsSet.current = true; // Устанавливаем флаг до вызова handleMove\n          handleMove();\n        }\n      }, 200);\n    }\n\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.off('moveend', handleMove);\n        mapRef.current.off('zoomend', handleMove);\n      }\n      \n      if (boundsTimeout) {\n        window.clearTimeout(boundsTimeout);\n      }\n    };\n  }, []); // Убираем onBoundsChange из зависимостей\n\n  return (\n    <MapContainer \n      ref={containerRef} \n      className=\"map-wrapper\"\n    />\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}